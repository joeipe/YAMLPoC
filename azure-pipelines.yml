variables:
- name: BuildParameters.RestoreBuildProjects
  value: '**/*.csproj'
- name: BuildParameters.TestProjects
  value: '**/*[Tt]ests/*.csproj'
trigger:
  branches:
    include:
    - refs/heads/master
    - development
name: $(date:yyyyMMdd)$(rev:.r)
stages:
- stage: build
  jobs:
  - job: Job_1
    displayName: Agent job 1
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: $(BuildParameters.RestoreBuildProjects)
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        projects: $(BuildParameters.RestoreBuildProjects)
        arguments: --configuration $(BuildConfiguration)
    - task: DotNetCoreCLI@2
      displayName: Test
      inputs:
        command: test
        projects: $(BuildParameters.TestProjects)
        arguments: --configuration $(BuildConfiguration)
    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: publish
        publishWebProjects: True
        projects: $(BuildParameters.RestoreBuildProjects)
        arguments: --configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)
        zipAfterPublish: True
    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact
      condition: succeededOrFailed()
      inputs:
        PathtoPublish: $(build.artifactstagingdirectory)
        TargetPath: '\\my\share\$(Build.DefinitionName)\$(Build.BuildNumber)'

- stage: Check
  jobs:
  - job: Job_1
    displayName: Agent job 1
    pool:
      vmImage: ubuntu-latest
    steps:
    - script: echo "name is $(Build.SourceBranchName)"

- stage: Condition
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))
  jobs:
  - job: Job_1
    displayName: Agent job 1
    pool:
      vmImage: ubuntu-latest
    steps:
    - script: echo "name is $(Build.SourceBranchName)"